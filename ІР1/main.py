import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

CHOOSE_FEED, CHOOSE_QUANTITY, GET_CONTACT, CONFIRM_ORDER = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("–ö–æ—Ä–º –¥–ª—è –ø–∞–ø—É–≥ ü¶ú", callback_data='feed_parrot')],
        [InlineKeyboardButton("–ö–æ—Ä–º –¥–ª—è –∫–∞–Ω–∞—Ä–æ–∫ üê§", callback_data='feed_canary')],
        [InlineKeyboardButton("–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∫–æ—Ä–º üïäÔ∏è", callback_data='feed_universal')],
        [InlineKeyboardButton("–Ü–Ω—à–∏–π —Ç–∏–ø (–≤–∫–∞–∂—ñ—Ç—å)", callback_data='feed_other')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–º–æ–≤–∏—Ç–∏ –∫–æ—Ä–º –¥–ª—è –ø—Ç–∞—Ö—ñ–≤. üê¶\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ—Ä–º—É:",
        reply_markup=reply_markup
    )
    return CHOOSE_FEED

async def choose_feed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    feed_type = query.data
    context.user_data['feed_type'] = feed_type.replace('feed_', '')

    if feed_type == 'feed_other':
        await query.edit_message_text(text="–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å, —è–∫–∏–π —Å–∞–º–µ –∫–æ—Ä–º –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:")
        context.user_data['feed_type'] = 'other_specified_later'
        await query.message.reply_text("–î–æ–±—Ä–µ. –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –±–∞–∂–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤ –∫–≥ –∞–±–æ —à—Ç):")
    else:
        await query.edit_message_text(text=f"–í–∏ –æ–±—Ä–∞–ª–∏: {context.user_data['feed_type']}. –ß—É–¥–æ–≤–æ!")
        await query.message.reply_text("–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –±–∞–∂–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤ –∫–≥ –∞–±–æ —à—Ç):")

    return CHOOSE_QUANTITY

async def choose_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    quantity = update.message.text
    context.user_data['quantity'] = quantity

    if not quantity:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å.")
        return CHOOSE_QUANTITY

    await update.message.reply_text(
        f"–ó–∞–ø–∞–º'—è—Ç–∞–≤: {quantity}.\n"
        "–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –∞–¥—Ä–µ—Å—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )
    return GET_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact_info = update.message.text
    context.user_data['contact'] = contact_info

    feed_type = context.user_data.get('feed_type', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    quantity = context.user_data.get('quantity', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    contact = context.user_data.get('contact', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')

    summary_text = (
        f"**–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n"
        f"–¢–∏–ø –∫–æ—Ä–º—É: {feed_type}\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {contact}\n\n"
        f"–í—Å–µ –≤—ñ—Ä–Ω–æ?"
    )

    keyboard = [
        [
            InlineKeyboardButton("–¢–∞–∫, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ üëç", callback_data='confirm_yes'),
            InlineKeyboardButton("–ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏ üëé", callback_data='confirm_no'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(summary_text, reply_markup=reply_markup, parse_mode='Markdown')
    return CONFIRM_ORDER

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == 'confirm_yes':
        feed_type = context.user_data.get('feed_type', 'N/A')
        quantity = context.user_data.get('quantity', 'N/A')
        contact = context.user_data.get('contact', 'N/A')

        order_details = f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n–¢–∏–ø: {feed_type}\n–ö-—Å—Ç—å: {quantity}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
        logger.info(order_details)

        await query.edit_message_text(text="‚úÖ –î—è–∫—É—é! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        try:
            admin_chat_id = 709307873
            await context.bot.send_message(chat_id=admin_chat_id, text=order_details)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

    elif query.data == 'confirm_no':
        await query.edit_message_text(text="‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")

    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")
    context.user_data.clear()
    return ConversationHandler.END

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

def main() -> None:
    application = Application.builder().token("8056922219:AAFbsmHMKGgYV2F2O0gikMhPACvKcA4CZes").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_FEED: [
                CallbackQueryHandler(choose_feed, pattern='^feed_')
            ],
            CHOOSE_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, choose_quantity)
            ],
            GET_CONTACT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)
            ],
            CONFIRM_ORDER: [
                CallbackQueryHandler(confirm_order, pattern='^confirm_')
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.TEXT | filters.COMMAND, fallback_handler)
            ],
        per_user=True,
        per_chat=True,
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("cancel", cancel))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == "__main__":
    main()