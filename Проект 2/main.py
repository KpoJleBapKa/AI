import telebot
import requests
import sqlite3

TOKEN = 'hidden'
WG_API_KEY = 'hidden'
ADMIN_USER_ID = 'kpojlebapka'

bot = telebot.TeleBot(TOKEN)

def create_connection():
    conn = None
    try:
        conn = sqlite3.connect('wot_bot.db')
        return conn
    except sqlite3.Error as e:
        print(e)
    return conn

def create_tables():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS feedback (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            feedback_text TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

create_tables()


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = telebot.types.KeyboardButton('/wothelp')
    item2 = telebot.types.KeyboardButton('/findstat')
    item3 = telebot.types.KeyboardButton('/findclan')
    item4 = telebot.types.KeyboardButton('/feedback')
    markup.add(item1, item2, item3, item4)

    bot.reply_to(message, f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! üëã\n"
                           "–Ø –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ World of Tanks.\n"
                           "–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:", reply_markup=markup)

@bot.message_handler(commands=['wothelp'])
def send_help(message):
    help_message = (
        "<b>|--------------------------------------------------------------------------------|</b>\n"
        "<b>–ë–æ—Ç</b> –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ <b>World of Tanks</b>\n"
        "\n"
        "<i>–ö–æ–º–∞–Ω–¥–∏: </i>\n"
        "<b>/findstat</b> <i>'–Ω—ñ–∫–Ω–µ–π–º'</i> - –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è \n"
        "<b>/findclan</b> <i>'–Ω–∞–∑–≤–∞ –∫–ª–∞–Ω—É'</i> - –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª–∞–Ω \n"
        "<b>/gm_battles</b> <i>'—Ç–µ–≥ –∫–ª–∞–Ω—É'</i> - –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –º–∞–π–±—É—Ç–Ω—ñ –±–æ—ó –∫–ª–∞–Ω—É –Ω–∞ –ì–ª–æ–±–∞–ª—å–Ω—ñ–π –ú–∞–ø—ñ\n"
        "<b>/gm_stat</b> <i>'—Ç–µ–≥ –∫–ª–∞–Ω—É'</i> - –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞–Ω—É –Ω–∞ –ì–ª–æ–±–∞–ª—å–Ω—ñ–π –ú–∞–ø—ñ\n"
        "<b>/clan_members</b> <i>'—Ç–µ–≥ –∫–ª–∞–Ω—É'</i> - –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—ñ–≤ –∫–ª–∞–Ω—É\n"
        "<b>/feedback</b> - –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –±–æ—Ç–∞\n"
        "<b>/info</b> - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n"
        "<b>|---------------------------------------------------------------------------------|</b>\n"
    )
    bot.send_message(message.chat.id, help_message, parse_mode='HTML')

@bot.message_handler(commands=['info'])
def send_info(message):
    info_message = (
        "<b>|-------------------------------------------------|</b>\n"
        "<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞</b>\n"
        "<br>\n"
        "–¶–µ–π –±–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—ñ–≤ —Ç–∞ –∫–ª–∞–Ω—ñ–≤ —É –≥—Ä—ñ World of Tanks.\n"
        "–í—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î API World of Tanks –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö.\n"
        "–†–æ–∑—Ä–æ–±–Ω–∏–∫: [–¢–≤–æ—î —ñ–º'—è/–Ω—ñ–∫–Ω–µ–π–º]\n"
        "–í–µ—Ä—Å—ñ—è: 1.0\n"
        "<b>|-------------------------------------------------|</b>\n"
    )
    bot.send_message(message.chat.id, info_message, parse_mode='HTML')

@bot.message_handler(commands=['findstat'])
def find_stat(message):
    try:
        player_name = message.text.split(' ', 1)[1]
        wot_api_url = f'https://api.worldoftanks.eu/wot/account/list/?application_id={WG_API_KEY}&search={player_name}'

        response = requests.get(wot_api_url)
        data = response.json()

        if data is None or 'data' not in data or not data['data']:
            bot.reply_to(message, f"–ì—Ä–∞–≤–µ—Ü—å <b>{player_name}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.", parse_mode='HTML')
            return

        account_id = data['data'][0]['account_id']
        stats_url = f'https://api.worldoftanks.eu/wot/account/info/?application_id={WG_API_KEY}&account_id={account_id}'

        response = requests.get(stats_url)
        stats_data = response.json()

        if stats_data is None or 'data' not in stats_data or str(account_id) not in stats_data['data']:
            bot.reply_to(message, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥—Ä–∞–≤—Ü—è <b>{player_name}</b> –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", parse_mode='HTML')
            return

        stats = stats_data['data'][str(account_id)]['statistics']['all']

        clan_info_url = f'https://api.worldoftanks.eu/wot/clans/accountinfo/?application_id={WG_API_KEY}&account_id={account_id}'
        response = requests.get(clan_info_url)
        clan_data = response.json()

        try:
            clan_name = clan_data['data'][str(account_id)]['clan']['tag']
        except (KeyError, TypeError):
            clan_name = "–±–µ–∑ –∫–ª–∞–Ω—É"

        message_text = (f"<b>|----------------------------------------------------------------|</b>\n"
                        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è</b> <i>{player_name}</i>\n"
                        f"<b>–ö–ª–∞–Ω:</b> {clan_name}\n"
                        f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ—ó–≤:</b> {stats['battles']}\n"
                        f"<b>% –ø–µ—Ä–µ–º–æ–≥:</b> {stats['wins'] / stats['battles'] * 100:.2f}%\n"
                        f"<b>% –≤–ª—É—á–µ–Ω—å:</b> {stats['hits'] / stats['shots'] * 100:.2f}%\n"
                        f"<b>–°–µ—Ä–µ–¥–Ω—è —à–∫–æ–¥–∞:</b> {stats['damage_dealt'] / stats['battles']:.2f}\n"
                        f"<b>–°–µ—Ä–µ–¥–Ω—ñ–π –¥–æ—Å–≤—ñ–¥:</b> {stats['xp'] / stats['battles']:.2f}\n"
                        f"<b>–ú–∞–∫—Å–∏–º—É–º –∑–Ω–∏—â–µ–Ω–æ –∑–∞ –±—ñ–π:</b> {stats['max_frags']}\n"
                        f"<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥ –∑–∞ –±—ñ–π:</b> {stats['max_xp']}\n"
                        f"<b>|----------------------------------------------------------------|</b>")
        bot.send_message(message.chat.id, message_text, parse_mode='HTML')

    except IndexError:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–∫–ª–∞–¥: /findstat KpoJleBapKa", parse_mode='HTML')
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ findstat: {e}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}", parse_mode='HTML')

@bot.message_handler(commands=['findclan'])
def find_clan(message):
    try:
        clan_name = message.text.split(' ', 1)[1]
        clan_info_url = f'https://api.worldoftanks.eu/wot/clans/list/?application_id={WG_API_KEY}&search={clan_name}'
        response = requests.get(clan_info_url)
        clan_data = response.json()

        if clan_data is None or 'data' not in clan_data or not clan_data['data']:
            bot.reply_to(message, f"–ö–ª–∞–Ω <b>{clan_name}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.", parse_mode='HTML')
            return

        clan_info = clan_data['data'][0]

        clan_members_url = f'https://api.worldoftanks.eu/wot/clans/info/?application_id={WG_API_KEY}&clan_id={clan_info["clan_id"]}&fields=members'
        response = requests.get(clan_members_url)
        clan_members_data = response.json()

        if clan_members_data is None or 'data' not in clan_members_data or str(clan_info["clan_id"]) not in clan_members_data['data']:
            bot.reply_to(message, f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä–∞–≤—Ü—ñ–≤ –∫–ª–∞–Ω—É <b>{clan_name}</b> –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", parse_mode='HTML')
            return

        message_text = (f"<b>|----------------------------------------------------------------|</b>\n"
                        f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª–∞–Ω</b> <i>{clan_name}</i>\n"
                        f"<b>–¢–µ–≥ –∫–ª–∞–Ω—É:</b> {clan_info['tag']}\n"
                        f"<b>–ù–∞–∑–≤–∞ –∫–ª–∞–Ω—É:</b> {clan_info['name']}\n"
                        f"<b>–£—á–∞—Å–Ω–∏–∫–∏ –∫–ª–∞–Ω—É:</b> {clan_info['members_count']}\n"
                        f"<b>|----------------------------------------------------------------|</b>")
        bot.send_message(message.chat.id, message_text, parse_mode='HTML')

    except IndexError:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–∫–ª–∞–¥: /findclan MANKI", parse_mode='HTML')
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ findclan: {e}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}", parse_mode='HTML')

@bot.message_handler(commands=['gm_battles'])
def gm_battles(message):
    try:
        clan_tag = message.text.split(' ', 1)[1]
        clan_info_url = f'https://api.worldoftanks.eu/wot/clans/list/?application_id={WG_API_KEY}&search={clan_tag}'
        response = requests.get(clan_info_url)
        clan_data = response.json()

        if clan_data is None or 'data' not in clan_data or not clan_data['data']:
            bot.reply_to(message, f"–ö–ª–∞–Ω –∑ —Ç–µ–≥–æ–º <b>{clan_tag}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.", parse_mode='HTML')
            return

        clan_info = clan_data['data'][0]

        gm_battles_url = f'https://api.worldoftanks.eu/wot/globalmap/clanbattles/?application_id={WG_API_KEY}&clan_id={clan_info["clan_id"]}'
        response = requests.get(gm_battles_url)
        gm_battles_data = response.json()

        if gm_battles_data is None or 'data' not in gm_battles_data or not gm_battles_data['data']:
            bot.reply_to(message, f"–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —É –∫–ª–∞–Ω—É <b>{clan_tag}</b> –±–æ—ó –Ω–µ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω—ñ.", parse_mode='HTML')
            return

        battles = gm_battles_data['data']
        response_text = ""
        for battle in battles:
            battle_info = battle['battle']
            response_text += (f"<b>|----------------------------------------------------------------|</b>\n"
                              f"<b>–ú–∞–π–±—É—Ç–Ω—ñ–π –±—ñ–π –∫–ª–∞–Ω—É</b> <i>{clan_tag}</i>\n"
                              f"<b>–ü—Ä–æ—Ç–∏ —è–∫–æ–≥–æ –∫–ª–∞–Ω—É:</b> {battle_info['opponents'][0]['clan']['tag']}\n"
                              f"<b>–ù–∞ –∫–∞—Ä—Ç—ñ:</b> {battle_info['map']['name_i18n']}\n"
                              f"<b>–ß–∞—Å –±–æ—é (UTC):</b> {battle_info['start_at']}\n"
                              f"<b>|----------------------------------------------------------------|</b>\n")
        bot.send_message(message.chat.id, response_text, parse_mode='HTML')

    except IndexError:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–∫–ª–∞–¥: /gm_battles MANKI", parse_mode='HTML')
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ gm_battles: {e}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}", parse_mode='HTML')

@bot.message_handler(commands=['gm_stat'])
def global_clan(message):
    try:
        clan_tag = message.text.split(' ', 1)[1]
        clan_info_url = f'https://api.worldoftanks.eu/wot/clans/list/?application_id={WG_API_KEY}&search={clan_tag}'
        response = requests.get(clan_info_url)
        clan_data = response.json()

        if clan_data is None or 'data' not in clan_data or not clan_data['data']:
            bot.reply_to(message, f"–ö–ª–∞–Ω –∑ —Ç–µ–≥–æ–º <b>{clan_tag}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.", parse_mode='HTML')
            return

        clan_info = clan_data['data'][0]

        global_clan_url = f'https://api.worldoftanks.eu/wot/globalmap/claninfo/?application_id={WG_API_KEY}&clan_id={clan_info["clan_id"]}'
        response = requests.get(global_clan_url)
        global_clan_data = response.json()

        if global_clan_data is None or 'data' not in global_clan_data or not global_clan_data['data']:
            bot.reply_to(message, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω—É <b>{clan_tag}</b> –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –∫–∞—Ä—Ç—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", parse_mode='HTML')
            return

        clan_stats = global_clan_data['data'][str(clan_info["clan_id"])]

        message_text = (f"<b>|----------------------------------------------------------------|</b>\n"
                        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω—É –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –∫–∞—Ä—Ç—ñ</b> <i>{clan_tag}</i>\n"
                        f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ—ó–≤:</b> {clan_stats.get('battles', 0)}\n"
                        f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π:</b> {clan_stats.get('territories', 0)}\n"
                        f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–≥:</b> {clan_stats.get('wins', 0)}\n"
                        f"<b>|----------------------------------------------------------------|</b>")
        bot.send_message(message.chat.id, message_text, parse_mode='HTML')

    except IndexError:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–∫–ª–∞–¥: /gm_stat MANKI", parse_mode='HTML')
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ gm_stat: {e}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}", parse_mode='HTML')

@bot.message_handler(commands=['clan_members'])
def clan_members(message):
    try:
        clan_tag = message.text.split(' ', 1)[1]
        clan_info_url = f'https://api.worldoftanks.eu/wot/clans/list/?application_id={WG_API_KEY}&search={clan_tag}'
        response = requests.get(clan_info_url)
        clan_data = response.json()

        if clan_data is None or 'data' not in clan_data or not clan_data['data']:
            bot.reply_to(message, f"–ö–ª–∞–Ω –∑ —Ç–µ–≥–æ–º <b>{clan_tag}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.", parse_mode='HTML')
            return

        clan_info = clan_data['data'][0]
        clan_id = clan_info["clan_id"]

        clan_members_url = f'https://api.worldoftanks.eu/wot/clans/info/?application_id={WG_API_KEY}&clan_id={clan_id}&fields=members'
        response = requests.get(clan_members_url)
        clan_members_data = response.json()

        if clan_members_data is None or 'data' not in clan_members_data or str(clan_id) not in clan_members_data['data']:
            bot.reply_to(message, f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä–∞–≤—Ü—ñ–≤ –∫–ª–∞–Ω—É <b>{clan_tag}</b> –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", parse_mode='HTML')
            return

        clan_members = clan_members_data['data'][str(clan_id)]["members"]
        total_members = len(clan_members)

        if not clan_members:
            bot.reply_to(message, f"–í –∫–ª–∞–Ω—ñ <b>{clan_tag}</b> –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.", parse_mode='HTML')
            return

        leaderboard_message = f"<b>–ö–ª–∞–Ω \"{clan_tag}\"</b>\n\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ —É –∫–ª–∞–Ω—ñ: {total_members}\n\n<b>‚ïü –ù—ñ–∫–Ω–µ–π–º, —Ä–æ–ª—å, % –ø–µ—Ä–µ–º–æ–≥, —Å–µ—Ä–µ–¥–Ω—è —à–∫–æ–¥–∞ ‚ï£</b>"

        for index, member_info in enumerate(clan_members[:100], start=1):
            player_name = member_info['account_name']
            member_id = member_info['account_id']

            player_stats_url = f'https://api.worldoftanks.eu/wot/account/info/?application_id={WG_API_KEY}&account_id={member_id}&fields=statistics.all'
            response = requests.get(player_stats_url)
            player_stats_data = response.json()

            if player_stats_data is None or 'data' not in player_stats_data or str(member_id) not in player_stats_data['data']:
                wins_percent = 0.0
                avg_damage = 0.0
            else:
                stats = player_stats_data['data'][str(member_id)]['statistics']['all']
                battles = stats['battles']
                wins_percent = (stats['wins'] / battles * 100) if battles > 0 else 0.0
                avg_damage = (stats['damage_dealt'] / battles) if battles > 0 else 0.0

            leaderboard_message += f"\n<b>{player_name}</b> - <i>{member_info['role']}</i> - ¬†<b>{wins_percent:.2f}%</b> - ¬†<b>{avg_damage:.2f}</b>"

            if index % 10 == 0 or index == len(clan_members):
                bot.send_message(message.chat.id, leaderboard_message, parse_mode='HTML')
                leaderboard_message = ""

    except IndexError:
        bot.reply_to(message, "–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–∫–ª–∞–¥: /clan_members MANKI", parse_mode='HTML')
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ clan_members: {e}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}", parse_mode='HTML')

@bot.message_handler(commands=['feedback'])
def feedback(message):
    bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫:")
    bot.register_next_step_handler(message, process_feedback)

def process_feedback(message):
    try:
        feedback_text = message.text
        user_id = message.from_user.id
        username = message.from_user.username

        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO feedback (user_id, username, feedback_text) VALUES (?, ?, ?)",
                       (user_id, username, feedback_text))
        conn.commit()
        conn.close()

        bot.reply_to(message, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! üôè")

        if ADMIN_USER_ID:
            admin_message = f"–ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} ({user_id}):\n\n{feedback_text}"
            bot.send_message(ADMIN_USER_ID, admin_message)

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–≥—É–∫—É: {e}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É: {e}")

@bot.message_handler(func=lambda message: message.text.lower() in ['–ø—Ä–∏–≤—ñ—Ç', 'hello', '–∫—É'])
def greet(message):
    bot.reply_to(message, f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! üëã")

@bot.message_handler(func=lambda message: message.text.lower() in ['–¥—è–∫—É—é', '—Å–ø–∞—Å–∏–±–æ'])
def thank(message):
    bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞! üòâ")

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...')
    bot.polling(none_stop=True)